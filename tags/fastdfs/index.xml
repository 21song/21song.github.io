<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FastDFS on 宋军亮的技术博客</title>
    <link>/tags/fastdfs/</link>
    <description>Recent content in FastDFS on 宋军亮的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/fastdfs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker下搭建FastDFS</title>
      <link>/2017/docker%E4%B8%8B%E6%90%AD%E5%BB%BAfastdfs/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/docker%E4%B8%8B%E6%90%AD%E5%BB%BAfastdfs/</guid>
      <description>利用Docker来搭建分布式文件系统FastDfs ​ 对于文件存储来说，一般情况下简单的处理就是在Django配置文件中配置存储目录，按照规则对文件进行上传或者下载。
​ 实际上，当文件较少的时候，Django是可以应付的过来的。但当文件以海量形式出现的时候，Django就并不是那么好用了，于是Fast DFS应运而出。
​ FastDFS是一个开源的分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。可以说它就是为互联网而生，为大数据而生的。
​ FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。 存储节点存储文件，完成文件管理的所有功能：存储、同步和提供存取接口，FastDFS同时对文件的meta data进行管理。跟踪器和存储节点都可以由多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
​
​ 说人话，为啥要用FastDfs:
​ 1 解决海量存储，同时存储容量扩展方便。
​ 2 解决文件内容重复,如果用户上传的文件重复(文件指纹一样)，那么系统只有存储一份数据，值得一提的是，这项技术目前被广泛应用在网盘中。
​ 3 结合Nginx提高网站读取图片的效率。
如果我们从头搭建fastdfs服务器那么就太low了，网上有大把的docker镜像供你选择，所以又到了利用docker优越性的时候了，首先下载fastdfs镜像 1.加载镜像
docker pull delron/fastdfs  ·# docker load -i 文件路径/fastdfs_docker.tar
2. 运行tracker
执行如下命令开启tracker 服务
docker run -d --network=host --name tracker -v /root:/var/root delron/fastdfs tracker  ·# docker run -dti &amp;ndash;network=host &amp;ndash;name tracker -v /var/fdfs/tracker:/var/fdfs delron/fastdfs tracker
我们将fastDFS tracker运行目录映射到本机的/var/root目录中。
执行如下命令查看tracker是否运行起来
docker container ls
如果想停止tracker服务，可以执行如下命令
docker container stop tracker</description>
    </item>
    
  </channel>
</rss>