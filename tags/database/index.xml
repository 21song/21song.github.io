<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on 宋军亮的技术博客</title>
    <link>/tags/database/</link>
    <description>Recent content in database on 宋军亮的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据库优化</title>
      <link>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</guid>
      <description>一：优化说明 A：有数据表明，用户可以承受的最大等待时间为8秒。数据库优化策略有很多，设计初期，建立好的数据结构对于后期性能优化至关重要。因为数据库结构是系统的基石，基础打不好，使用各种优化策略，也不能达到很完美的效果。
B：数据库优化的几个方面
可以看出来，数据结构、SQL、索引是成本最低，且效果最好的优化手段。
C：性能优化是无止境的，当性能可以满足需求时即可，不要过度优化。
二：优化方向 1. SQL以及索引的优化 首先要根据需求写出结构良好的SQL，然后根据SQL在表中建立有效的索引。但是如果索引太多，不但会影响写入的效率，对查询也有一定的影响。
 合理的数据库是设计 根据数据库三范式来进行表结构的设计。设计表结构时，就需要考虑如何设计才能更有效的查询。  数据库三范式： 第一范式：数据表中每个字段都必须是不可拆分的最小单元，也就是确保每一列的原子性； 第二范式：满足一范式后，表中每一列必须有唯一性，都必须依赖于主键； 第三范式：满足二范式后，表中的每一列只与主键直接相关而不是间接相关(外键也是直接相关)，字段没有冗余。
注意：没有最好的设计，只有最合适的设计，所以不要过分注重理论。三范式可以作为一个基本依据，不要生搬硬套。
有时候可以根据场景合理地反规范化： A：分割表。 B：保留冗余字段。当两个或多个表在查询中经常需要连接时，可以在其中一个表上增加若干冗余的字段，以 避免表之间的连接过于频繁，一般在冗余列的数据不经常变动的情况下使用。 C：增加派生列。派生列是由表中的其它多个列的计算所得，增加派生列可以减少统计运算，在数据汇总时可以大大缩短运算时间。
数据库五大约束： A：PRIMARY key:设置主键约束； B：UNIQUE：设置唯一性约束，不能有重复值； C：DEFAULT 默认值约束 D：NOT NULL：设置非空约束，该字段不能为空； E：FOREIGN key :设置外键约束。
字段类型选择： A：尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED B：VARCHAR的长度只分配真正需要的空间 C：使用枚举或整数代替字符串类型 D：尽量使用TIMESTAMP而非DATETIME E：单表不要有太多字段，建议在20以内 F：避免使用NULL字段，很难查询优化且占用额外索引空间
 系统配置的优化 例如：MySQL数据库my.cnf
 硬件优化 更快的IO、更多的内存。一般来说内存越大，对于数据库的操作越好。但是CPU多就不一定了，因为他并不会用到太多的CPU数量，有很多的查询都是单CPU。另外使用高的IO（SSD、RAID），但是IO并不能减少数据库锁的机制。所以说如果查询缓慢是因为数据库内部的一些锁引起的，那么硬件优化就没有什么意义。
  三：优化方案 代码优化 之所以把代码放到第一位，是因为这一点最容易引起技术人员的忽视。很多技术人员拿到一个性能优化的需求以后，言必称缓存、异步、JVM等。实际上，第一步就应该是分析相关的代码，找出相应的瓶颈，再来考虑具体的优化策略。有一些性能问题，完全是由于代码写的不合理，通过直接修改一下代码就能解决问题的，比如for循环次数过多、作了很多无谓的条件判断、相同逻辑重复多次等。
举个栗子： 一个update操作，先查询出entity，再执行update，这样无疑多了一次数据库交互。还有一个问题，update语句可能会操作一些无需更新的字段。 ​ 我们可以将表单中涉及到的属性，以及updateTime，updateUser等赋值到entity，直接通过pdateByPrimaryKeySelective，去update特定字段。
​​
定位慢SQL，并优化 这是最常用、每一个技术人员都应该掌握基本的SQL调优手段（包括方法、工具、辅助系统等）。这里以MySQL为例，最常见的方式是，由自带的慢查询日志或者开源的慢查询系统定位到具体的出问题的SQL，然后使用explain、profile等工具来逐步调优，最后经过测试达到效果后上线。
SqlServer执行计划： 通过执行计划，我们能得到哪些信息： A：哪些步骤花费的成本比较高 B：哪些步骤产生的数据量多，数据量的多少用线条的粗细表示，很直观 C：每一步执行了什么动作
具体优化手段： A：尽量少用（或者不用）sqlserver 自带的函数 select id from t where substring(name,1,3) = ’abc’ select id from t where datediff(day,createdate,’2005-11-30′) = 0 可以这样查询： select id from t where name like ‘abc%’ select id from t where createdate &amp;gt;= ‘2005-11-30’ and createdate &amp;lt; ‘2005-12-1’</description>
    </item>
    
    <item>
      <title>数据库sql优化</title>
      <link>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E4%BC%98%E5%8C%96/</guid>
      <description>1.对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。
2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：
select id from t where num is null  最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库.
备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用NULL。
不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。
可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：
select id from t where num = 0  3.应尽量避免在 where 子句中使用 != 或 &amp;lt;&amp;gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。
4.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，如：
select id from t where num=10 or Name = &#39;admin&#39; 可以这样查询： select id from t where num = 10 union all select id from t where Name = &#39;admin&#39;  5.</description>
    </item>
    
  </channel>
</rss>