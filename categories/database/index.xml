<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on 宋军亮的技术博客</title>
    <link>/categories/database/</link>
    <description>Recent content in Database on 宋军亮的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据库优化</title>
      <link>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</guid>
      <description>一：优化说明 A：有数据表明，用户可以承受的最大等待时间为8秒。数据库优化策略有很多，设计初期，建立好的数据结构对于后期性能优化至关重要。因为数据库结构是系统的基石，基础打不好，使用各种优化策略，也不能达到很完美的效果。
B：数据库优化的几个方面
可以看出来，数据结构、SQL、索引是成本最低，且效果最好的优化手段。
C：性能优化是无止境的，当性能可以满足需求时即可，不要过度优化。
二：优化方向 1. SQL以及索引的优化 首先要根据需求写出结构良好的SQL，然后根据SQL在表中建立有效的索引。但是如果索引太多，不但会影响写入的效率，对查询也有一定的影响。
 合理的数据库是设计 根据数据库三范式来进行表结构的设计。设计表结构时，就需要考虑如何设计才能更有效的查询。  数据库三范式： 第一范式：数据表中每个字段都必须是不可拆分的最小单元，也就是确保每一列的原子性； 第二范式：满足一范式后，表中每一列必须有唯一性，都必须依赖于主键； 第三范式：满足二范式后，表中的每一列只与主键直接相关而不是间接相关(外键也是直接相关)，字段没有冗余。
注意：没有最好的设计，只有最合适的设计，所以不要过分注重理论。三范式可以作为一个基本依据，不要生搬硬套。
有时候可以根据场景合理地反规范化： A：分割表。 B：保留冗余字段。当两个或多个表在查询中经常需要连接时，可以在其中一个表上增加若干冗余的字段，以 避免表之间的连接过于频繁，一般在冗余列的数据不经常变动的情况下使用。 C：增加派生列。派生列是由表中的其它多个列的计算所得，增加派生列可以减少统计运算，在数据汇总时可以大大缩短运算时间。
数据库五大约束： A：PRIMARY key:设置主键约束； B：UNIQUE：设置唯一性约束，不能有重复值； C：DEFAULT 默认值约束 D：NOT NULL：设置非空约束，该字段不能为空； E：FOREIGN key :设置外键约束。
字段类型选择： A：尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED B：VARCHAR的长度只分配真正需要的空间 C：使用枚举或整数代替字符串类型 D：尽量使用TIMESTAMP而非DATETIME E：单表不要有太多字段，建议在20以内 F：避免使用NULL字段，很难查询优化且占用额外索引空间
 系统配置的优化 例如：MySQL数据库my.cnf
 硬件优化 更快的IO、更多的内存。一般来说内存越大，对于数据库的操作越好。但是CPU多就不一定了，因为他并不会用到太多的CPU数量，有很多的查询都是单CPU。另外使用高的IO（SSD、RAID），但是IO并不能减少数据库锁的机制。所以说如果查询缓慢是因为数据库内部的一些锁引起的，那么硬件优化就没有什么意义。
  三：优化方案 代码优化 之所以把代码放到第一位，是因为这一点最容易引起技术人员的忽视。很多技术人员拿到一个性能优化的需求以后，言必称缓存、异步、JVM等。实际上，第一步就应该是分析相关的代码，找出相应的瓶颈，再来考虑具体的优化策略。有一些性能问题，完全是由于代码写的不合理，通过直接修改一下代码就能解决问题的，比如for循环次数过多、作了很多无谓的条件判断、相同逻辑重复多次等。
举个栗子： 一个update操作，先查询出entity，再执行update，这样无疑多了一次数据库交互。还有一个问题，update语句可能会操作一些无需更新的字段。 ​ 我们可以将表单中涉及到的属性，以及updateTime，updateUser等赋值到entity，直接通过pdateByPrimaryKeySelective，去update特定字段。
​​
定位慢SQL，并优化 这是最常用、每一个技术人员都应该掌握基本的SQL调优手段（包括方法、工具、辅助系统等）。这里以MySQL为例，最常见的方式是，由自带的慢查询日志或者开源的慢查询系统定位到具体的出问题的SQL，然后使用explain、profile等工具来逐步调优，最后经过测试达到效果后上线。
SqlServer执行计划： 通过执行计划，我们能得到哪些信息： A：哪些步骤花费的成本比较高 B：哪些步骤产生的数据量多，数据量的多少用线条的粗细表示，很直观 C：每一步执行了什么动作
具体优化手段： A：尽量少用（或者不用）sqlserver 自带的函数 select id from t where substring(name,1,3) = ’abc’ select id from t where datediff(day,createdate,’2005-11-30′) = 0 可以这样查询： select id from t where name like ‘abc%’ select id from t where createdate &amp;gt;= ‘2005-11-30’ and createdate &amp;lt; ‘2005-12-1’</description>
    </item>
    
    <item>
      <title>数据库sql优化</title>
      <link>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E4%BC%98%E5%8C%96/</guid>
      <description>1.对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。
2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：
select id from t where num is null  最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库.
备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用NULL。
不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。
可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：
select id from t where num = 0  3.应尽量避免在 where 子句中使用 != 或 &amp;lt;&amp;gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。
4.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，如：
select id from t where num=10 or Name = &#39;admin&#39; 可以这样查询： select id from t where num = 10 union all select id from t where Name = &#39;admin&#39;  5.</description>
    </item>
    
    <item>
      <title>Mysql的一些报错</title>
      <link>/2019/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99/</guid>
      <description>MySQL 连接错误Can&amp;rsquo;t connect to MySQL server on (61) 链接数据库时忽然遇到一个问题。Mac Navicat链接时报错Can’t connect to MySQL server on ‘xx.xx.xx.xx’ (61)。
PS. win版Navicat 报错Can’t connect to MySQL server on ‘xx.xx.xx.xx’ (10038)
其中xx.xx.xx.xx是ip地址。
1、查看该用户是否有远程登录的权限 ===
mysql&amp;gt; SELECT * FROM mysql.user; +-----------+-----------+ | User | Host | +-----------+-----------+ | M | % | | mysql.sys | localhost | | root | localhost | | tommy | ％ | | showhilllee | ％ | +-----------+-----------+ 5 rows in set (0.</description>
    </item>
    
    <item>
      <title>Mysql索引</title>
      <link>/2017/mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>索引是什么
索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。
更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度
索引目的
索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？
索引原理
除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。
数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&amp;gt;、&amp;lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。
普通索引
创建索引
这是最基本的索引，它没有任何限制。它有以下几种创建方式：
CREATE INDEX indexName ON mytable(username(length));
如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。
修改表结构(添加索引)
ALTER table tableName ADD INDEX indexName(columnName)
创建表的时候直接指定
CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, INDEX indexName );
删除索引的语法
DROP INDEX [indexName] ON mytable;
查看索引
show index from 表名;
用来查看某个表都具备哪些索引
联合索引
为两个或者两个以上的字段创建普通索引，适用于多个字段联合查询的优化
创建联合索引
ALTER TABLE test_index
ADD INDEX s_index (id, name) ;</description>
    </item>
    
    <item>
      <title>Mysql事务细说</title>
      <link>/2017/mysql%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E4%BA%8B%E5%8A%A1/</guid>
      <description>原子性（atomicity）
一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性
一致性（consistency）
数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。）
隔离性（isolation）
通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。）
持久性（durability）
一旦事务提交，则其所做的修改会永久保存到数据库。（此时即使系统崩溃，修改的数据也不会丢失。）
事务命令
表的引擎类型必须是innodb类型才可以使用事务，这是mysql表的默认引擎
查看表的创建语句，可以看到engine=innodb
&amp;ndash; 选择数据库
use jing_dong;
&amp;ndash; 查看goods表
show create table goods;
开启事务，命令如下：
开启事务后执行修改命令，变更会维护到本地缓存中，而不维护到物理表中
begin;
或者
start transaction;
提交事务，命令如下
commit;
将缓存中的数据变更维护到物理表中
回滚事务，命令如下：
放弃缓存中变更的数据
rollback;</description>
    </item>
    
    <item>
      <title>Mysql 自关联</title>
      <link>/2017/mysql%E8%87%AA%E5%85%B3%E8%81%94/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E8%87%AA%E5%85%B3%E8%81%94/</guid>
      <description>自关联的基本含义就是自己join自己，用一张表搞定多张表可以达到的效果
需要注意的是，当表自关联的时候，需要使用as 起别名，防止关联的时候引发重名的问题。
自关联
select
​ *
from
​ areas as p
inner join areas as c on c.pid=p.aid
where
​ p.atitle=&amp;lsquo;河南省&amp;rsquo;;
查询所有区
select
​ *
from
​ areas as c
inner join areas as a on a.pid=c.aid
where
​ c.atitle=&amp;lsquo;郑州市&amp;rsquo;;
三表关联
select
​ *
from
​ areas as p
left join areas as c on c.pid=p.aid
left join areas as a on a.pid=c.aid
where
p.atitle=&amp;lsquo;河南省&amp;rsquo;
子查询的定义
子查询允许把一个查询嵌套在另一个查询当中。
 标量子查询：  　是指子查询返回的是单一值的标量，如一个数字或一个字符串，也是子查询中最简单的返回形式。 可以使用 = &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= &amp;lt;&amp;gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧</description>
    </item>
    
    <item>
      <title>Mysql建表建库</title>
      <link>/2017/mysql%E5%AE%89%E8%A3%85%E5%BB%BA%E8%A1%A8%E5%BB%BA%E5%BA%93/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E5%AE%89%E8%A3%85%E5%BB%BA%E8%A1%A8%E5%BB%BA%E5%BA%93/</guid>
      <description>1 安装navicat 和 xampp ，注意路径不要出现中文，xampp最好安装在根目录
比如 d:/xampp
mysql 默认运行在3306端口
命令查看是否运行：netstat -an|find &amp;ldquo;3306&amp;rdquo; mysql的配置文件是my.ini 可以用来修改mysql的端口，目录，以及相关的配置
启动mysql 使用start 停止使用 stop
进入mysql命令行，找到你的xampp目录地址，进入mysql/bin目录打命令
mysql –uroot –p123456
修改root的密码
use mysql;update user set password = password(‘123456’) where user = ‘root’
退出mysql命令用 quit 或者 exit
mysql 默认的数据引擎是 innodb
InnoDB：支持事务处理，支持外键，并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。
MyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比较低，也可以使用。
查看mysql 当前版本： select verison(); 查看当前时间： select now();
查看逻辑运算：select 1+1;
列出所有数据库：show databases;
创建数据库 （一定注意创建数据库要指定编码utf8）
create database 库名 charset=utf8;
删除数据库
drop database 库名;
选择数据库
use 库名;
列出当前数据库中的所有表
show tables;</description>
    </item>
    
    <item>
      <title>连接查询(join 语法)</title>
      <link>/2017/mysql%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</guid>
      <description>join 用于多表中字段之间的联系，语法如下：
&amp;hellip; FROM table1 INNER|LEFT|RIGHT JOIN table2 ON conditiona
table1:左表；table2:右表。
JOIN 按照功能大致分为如下三类：
INNER JOIN（内连接,或等值连接）：取得两个表中存在连接匹配关系的记录。
LEFT JOIN（左连接）：取得左表（table1）完全记录，即是右表（table2）并无对应匹配记录。
RIGHT JOIN（右连接）：与 LEFT JOIN 相反，取得右表（table2）完全记录，即是左表（table1）并无匹配对应记录。
注意：mysql不支持Full join,不过可以通过UNION 关键字来合并 LEFT JOIN 与 RIGHT JOIN来模拟FULL join.
接下来给出一个列子用于解释下面几种分类。如下两个表(A,B)
 mysql&amp;gt; select A.id,A.name,B.name from A,B where A.id=B.id;
 +&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
 | id | name | name |
 +&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
 | 1 | Pirate | Rutabaga |
 | 2 | Monkey | Pirate |
 | 3 | Ninja | Darth Vader |</description>
    </item>
    
    <item>
      <title>Mysql 数据类型聚合函数</title>
      <link>/2017/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型
一个英文字符等于一个字节，一个中文三个字节
数据库类型的属性，重点是主键（primary key）和自增长(auto_increment)，理解主键的含义
表中的每一行都应该具有可以唯一标识自己的一列(或一组列)。而这个承担标识作用的列称为主键。
如果没有主键，数据的管理将会十分混乱。比如会存在多条一模一样的记录，删除和修改特定行十分困难。
自增长字段每个表只能有一个
使用 as 给字段起别名(给长的字段取别名)
select id as code from student;可以通过 as 给表起别名
在select后面列前使用distinct可以消除重复的行
s
mysql的联合主键：用2个字段(或者多个字段,后面具体都是用2个字段组合)来确定一条记录，说明，这2个字段都不是唯一的，2个字段可以分别重复，这么设置的好处，可以很直观的看到某个重复字段的记录条数。
筛选条件格式
select 字段1，字段2 from 表名 where 条件
比较运算符
逻辑运算符
and or not （is 用来判断null）
例5：查询编号大于3的女同学
select id,name,gender from student where id&amp;gt;3 and gender=&amp;lsquo;女&amp;rsquo;
例6：查询编号小于4或没被删除的学生
select id,name,is_delete from student where id&amp;lt;4 or is_delete=0
例7：查询年龄不为空的学生
select id,name,age from student where age is not null
范围查询
between &amp;hellip; and (相当于&amp;lt;=和&amp;gt;=)
查询年龄在20岁到30岁之间的学生
select name from student where age between 20 and 30</description>
    </item>
    
    <item>
      <title>Mysql 外键约束</title>
      <link>/2017/mysql%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mysql%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F/</guid>
      <description>建表时生成外键
FOREIGN KEY (sid) REFERENCES student (id);
建表后添加外键
ALTER TABLE course_student ADD FOREIGN KEY (sid) REFERENCES student (id);
删除外键
ALTER TABLE course_student DROP FOREIGN KEY course_student_ibfk_1;
外键用于与另一张表的关联。是能确定另一张表记录的字段，用于保持数据的一致性。比如，A表中的一个字段，是B表的主键，那他就可以是A表的外键。
主键、外键和索引的区别
主键 外键 索引
定义 唯一标识一条记录，不能有重复的，不允许为NULL 表的外键是另一表的主键, 外键可以有重复的, 可以是NULL 没有重复值，可以为NULL(会使索引无效)
作用 用来保证数据完整性 用来和其他表建立联系用的 提高查询排序的速度
个数 主键只能有一个 一个表可以有多个外键 一个表可以有多个惟一索引
错误的设计方式—[1215] Cannot add foreign key constraint
出现这种问题的原因一般有两个：
 两张表里要设主键和外键的字段的数据类型或者数据长度不一样。 2.某个表里已经有记录了。  </description>
    </item>
    
    <item>
      <title>mysql</title>
      <link>/2016/mysql/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/mysql/</guid>
      <description>数据库的使用，是开发人员的基本功，对它掌握越清晰越深入，你能做的事情就越多。
 做业务，要懂基本的SQL语句； 做性能优化，要懂索引，懂引擎； 做分库分表，要懂主从，懂读写分离&amp;hellip;
 今天我们用10分钟，重点梳理一遍以下几方面：
 数据库知识点汇总； 数据库事务特性和隔离级别； 详解关系型数据库、索引与锁机制； 数据库调优与最佳实践； 面试考察点及加分项。  知识点汇总
一、数据库的不同类型
1.常用的关系型数据库
 Oracle：功能强大，主要缺点就是贵 MySQL：互联网行业中最流行的数据库，这不仅仅是因为MySQL的免费。可以说关系数据库场景中你需要的功能，MySQL都能很好的满足，后面详解部分会详细介绍MySQL的一些知识点 MariaDB：是MySQL的分支，由开源社区维护，MariaDB虽然被看作MySQL的替代品，但它在扩展功能、存储引擎上都有非常好的改进 PostgreSQL：也叫PGSQL，PGSQL类似于Oracle的多进程框架，可以支持高并发的应用场景，PG几乎支持所有的SQL标准，支持类型相当丰富。PG更加适合严格的企业应用场景，而MySQL更适合业务逻辑相对简单、数据可靠性要求较低的互联网场景。  2.NoSQL数据库（非关系型数据库）
 Redis：提供了持久化能力，支持多种数据类型。Redis适用于数据变化快且数据大小可预测的场景。 MongoDB：一个基于分布式文件存储的数据库，将数据存储为一个文档，数据结构由键值对组成。MongoDB比较适合表结构不明确，且数据结构可能不断变化的场景，不适合有事务和复杂查询的场景。 HBase：建立在HDFS，也就是Hadoop文件系统之上的分布式面向列的数据库。类似于谷歌的大表设计，HBase可以提供快速随机访问海量结构化数据。在表中它由行排序，一个表有多个列族以及每一个列族可以有任意数量的列。 HBase依赖HDFS可以实现海量数据的可靠存储，适用于数据量大，写多读少，不需要复杂查询的场景。 Cassandra：一个高可靠的大规模分布式存储系统。支持分布式的结构化Key-value存储，以高可用性为主要目标。适合写多的场景，适合做一些简单查询，不适合用来做数据分析统计。 Pika：一个可持久化的大容量类Redis存储服务， 兼容五种主要数据结构的大部分命令。Pika使用磁盘存储，主要解决Redis大容量存储的成本问题。  3.NewSQL数据库（新一代关系型数据库）
 TiDB：开源的分布式关系数据库，几乎完全兼容MySQL，能够支持水平弹性扩展、ACID事务、标准SQL、MySQL语法和MySQL协议，具有数据强一致的高可用特性。既适合在线事务处理，也适合在线分析处理。 OceanBase：OceanBase是蚂蚁金服的数据库，OB是可以满足金融级的可靠性和数据一致性要求的数据库系统。当你需要使用事务，并且数据量比较大，就比较适合使用OB。不过目前OB已经商业化，不再开源。  二、事物特性及事物类型
后面的详解知识点会展开介绍
三、数据库的范式
前关系数据库有六种范式：第一范式、第二范式、第三范式、巴斯-科德范式（BCNF）、第四范式和第五范式。范式级别越高对数据表的要求越严格。
 第一范式要求最低，只要求表中字段不可用在拆分。 第二范式在第一范式的基础上要求每条记录由主键唯一区分，记录中所有属性都依赖于主键。 第三范式在第二范式的基础上，要求所有属性必须直接依赖主键，不允许间接依赖。 一般说来，数据库只需满足第三范式就可以了。  详解知识点一：数据库事务
知识点
▌1.数据库事务特性
数据库的特性是面试时考察频率非常高的题目，共4个特性：
 原子性：是指事务由原子的操作序列组成，所有操作要么全部成功，要么全部失败回滚。 一致性：是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处以一致性状态。比如在做多表操作时，多个表要么都是事务后新的值，要么都是事务前的旧值。 隔离性：是指多个用户并发访问数据库时，数据库为每个用户执行的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。事务的隔离级别我们稍后介绍。 持久性：是指一个事务一旦提交并执行成功，那么对数据库中数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。  ▌2.事物并发问题与隔离级别
a.事务并发问题
 脏读：脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据，例如，账户A转帐给B500元，B余额增加后但事务还没有提交完成，此时如果另外的请求中获取的是B增加后的余额，这就发生了脏读，因为事务如果失败回滚时，B的余额就不应该增加。 不可重复读：不可重复读是指对于数据库中某个数据，一个事务范围内多次查询返回了不同的数据值，这是由于在多次查询之间，有其他事务修改了数据并进行了提交。 幻读：是指一个事务中执行两次完全相同的查询时，第二次查询所返回的结果集跟第一个查询不相同。与不可重复读的区别在于，不可重复读是对同一条记录，两次读取的值不同。而幻读是记录的增加或删除，导致两次相同条件获取的结果记录数不同。  b：事务的四种隔离级别
可以用于解决这几种并发问题。如图右面，由上到下的4种隔离级别由低到高。
 级别1读未提交：也就是可以读取到其他事务未提交的内容，这是最低的隔离级别，这个隔离级别下，前面提到的三种并发问题都有可能发生。 级别2读已提交：就是只能读取到其他事务已经提交的数据。这个隔离级别可以解决脏读问题。 级别三可重复读：可以保证整个事务过程中，对同数据的多次读取结果是相同的。这个级别可以解决脏读和不可重复读的问题。MySQL默认的隔离级别就是可重复读。 级别四串行化：这是最高的隔离级别，所有事务操作都依次顺序执行。这个级别会导致并发度下降，性能最差。不过这个级别可以解决前面提到的所有并发问题。  ▌3.</description>
    </item>
    
    <item>
      <title>Mysql 视图（view）</title>
      <link>/2016/mysql%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/mysql%E8%A7%86%E5%9B%BE/</guid>
      <description>什么是视图
通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。
视图的特性
视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；
可以跟基本表一样，进行增删改查操作(ps:增删改操作有条件限制)；
视图的作用
方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性；
更加安全，数据库授权命令不能限定到特定行和特定列，但是通过合理创建视图，可以把权限限定到行列级别；
使用场合
权限控制的时候，不希望用户访问表中某些含敏感信息的列，比如salary&amp;hellip;
关键信息来源于多个复杂关联表，可以创建视图提取我们需要的信息，简化操作；
建立视图
建议名称以v_开头，用来和普通表区分
使用show tables 可以显示视图
create view 视图名称 as select语句;
使用视图
select * from 视图名称
删除视图
drop view 视图名称
修改视图
create or replace view 视图名称 as sql语句</description>
    </item>
    
    <item>
      <title>脏读</title>
      <link>/2016/%E8%84%8F%E8%AF%BB/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/%E8%84%8F%E8%AF%BB/</guid>
      <description>脏读 ​ 脏读又称无效数据的读出，是指在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。
剪短点讲：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</description>
    </item>
    
  </channel>
</rss>