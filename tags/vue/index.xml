<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 宋军亮的技术博客</title>
    <link>/tags/vue/</link>
    <description>Recent content in Vue on 宋军亮的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue 组件</title>
      <link>/2018/vue%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/vue%E7%BB%84%E4%BB%B6/</guid>
      <description>基本示例
这里有一个 Vue 组件的示例：
// 定义一个名为 button-counter 的新组件 Vue.component(&amp;lsquo;button-counter&amp;rsquo;, { data: function () { return { count: 0 } }, template: &amp;lsquo;You clicked me {{ count }} times.&amp;rsquo; })
组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 。我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：
  new Vue({ el: &amp;lsquo;#components-demo&amp;rsquo; })
You clicked me 0 times.
因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el这样根实例特有的选项。
组件的复用
你可以将组件进行任意次数的复用：
    You clicked me 0 times. You clicked me 0 times.</description>
    </item>
    
    <item>
      <title>Vue 过滤器</title>
      <link>/2018/vue%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/vue%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>过滤器：生活中有很多例子，净水器 空气净化器 。 过滤器的作用：实现数据的筛选、过滤、格式化。
vue1.*版本是有内置的过滤器，但是在vue2.*所有的版本都已经没有自带的过滤器了。
1、过滤器创建 过滤器的本质 是一个有参数 有返回值的方法 Vue.filter(&amp;lsquo;cap&amp;rsquo;,function(value){
​ 过滤器逻辑
​ });
2、过滤器使用 语法： {{表达式 | 过滤器}} 举个例子： {{price | cap}}
3、过滤器高级用法
在使用过滤器的时候，还可以指定参数，来告诉过滤器按照参数进行数据的过滤。
①如何给过滤器传参？ {{price | cap (&amp;lsquo;￥&amp;rsquo;,true)}} ②如何在过滤器中接收到？ new Vue({ filters:{ //myInput是通过管道传来的数据 //arg1在调用过滤器时在圆括号中第一个参数 //arg2在调用过滤器时在圆括号中第二个参数 cap:function(myInput,arg1,arg2){ return 处理后的数据 }
　}
})</description>
    </item>
    
    <item>
      <title>Class 与 Style 绑定</title>
      <link>/2018/vue-class%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/vue-class%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</guid>
      <description>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是属性，所以我们可以用 v-bind 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。
我们可以传给 v-bind:class 一个对象，以动态地切换 class：
 上面的语法表示 active 这个 class 存在与否将取决于数据属性 isActive 。
你可以在对象中传入更多属性来动态切换多个 class。此外，v-bind:class 指令也可以与普通的 class 属性共存。当有如下模板:
 和如下 data：
data: { isActive: true, hasError: false }
结果渲染为：
 当 isActive 或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError 的值为 true，class 列表将变为 &amp;ldquo;static active text-danger&amp;rdquo;。
绑定的数据对象不必内联定义在模板里：
no data: { classObject: { active: true, &#39;text-danger&#39;: false } } 渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的**计算属****性**。这是一个常用且强大的模式：  data: { isActive: true, error: null }, computed: { classObject: function () { return { active: this.</description>
    </item>
    
    <item>
      <title>Vue 生命周期</title>
      <link>/2018/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。
每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行中、销毁。
 实例、组件通过new Vue() 创建出来之后会初始化事件和生命周期，然后就会执行beforeCreate钩子函数，这个时候，数据还没有挂载呢，只是一个空壳，无法访问到数据和真实的dom，一般不做操作
 挂载数据，绑定事件等等，然后执行created函数，这个时候已经可以使用到数据，也可以更改数据,在这里更改数据不会触发updated函数，在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取
 接下来开始找实例或者组件对应的模板，编译模板为虚拟dom放入到render函数中准备渲染，然后执行beforeMount钩子函数，在这个函数中虚拟dom已经创建完成，马上就要渲染,在这里也可以更改数据，不会触发updated，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取
 接下来开始render，渲染出真实dom，然后执行mounted钩子函数，此时，组件已经出现在页面中，数据、真实dom都已经处理好了,事件都已经挂载好了，可以在这里操作真实dom等事情&amp;hellip;
 当组件或实例的数据更改之后，会立即执行beforeUpdate，然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染，一般不做什么事儿
 当更新完成后，执行updated，数据已经更改完成，dom也重新render完成，可以操作更新后的虚拟dom
 当经过某种途径调用$destroy方法后，立即执行beforeDestroy，一般在这里做一些善后工作，例如清除计时器、清除非指令绑定的事件等等
 组件的数据绑定、监听&amp;hellip;去掉后只剩下dom空壳，这个时候，执行destroyed，在这里做善后工作也可以
  </description>
    </item>
    
    <item>
      <title>Vue简述</title>
      <link>/2017/vue%E7%AE%80%E8%BF%B0/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/vue%E7%AE%80%E8%BF%B0/</guid>
      <description>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具以及各种类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。
Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。
在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。
如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render)，使用可选的 JSX 语法。
vue自动化流程安装步骤：
安装cnpm
npm install -g cnpm &amp;ndash;registry=https://registry.npm.taobao.org
安装 vue-cli
cnpm install -g vue-cli
清空缓存
npm cache clean —force
建立项目
vue init webpack nvue(项目名称)
进入项目目录
cd nvue
热启动服务
npm run dev
如果想停止服务
ctrl + c</description>
    </item>
    
  </channel>
</rss>