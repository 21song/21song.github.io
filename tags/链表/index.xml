<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>链表 on 宋军亮的技术博客</title>
    <link>/tags/%E9%93%BE%E8%A1%A8/</link>
    <description>Recent content in 链表 on 宋军亮的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E9%93%BE%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单链表</title>
      <link>/2019/%E5%8D%95%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E5%8D%95%E9%93%BE%E8%A1%A8/</guid>
      <description>单向链表也叫单链表，是链表中最简单的一种形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。 1.表元素域elem用来存放具体的数据。 2.链接域next用来存放下一个节点的位置 3.变量p指向链表的头节点（首节点）的位置，从p出发能找到表中的任意节点。
class SingleNode(object): &amp;quot;&amp;quot;&amp;quot;单链表的结点&amp;quot;&amp;quot;&amp;quot; def __init__(self,item): # _item存放数据元素 self.item = item # _next是下一个节点的标识 self.next = None  单链表的操作
is_empty() 链表是否为空 length() 链表长度 travel() 遍历整个链表 add(item) 链表头部添加元素 append(item) 链表尾部添加元素 insert(pos, item) 指定位置添加元素 remove(item) 删除节点 search(item) 查找节点是否存在
class SingleLinkList(object): &amp;quot;&amp;quot;&amp;quot;单链表&amp;quot;&amp;quot;&amp;quot; def __init__(self): self._head = None def is_empty(self): &amp;quot;&amp;quot;&amp;quot;判断链表是否为空&amp;quot;&amp;quot;&amp;quot; return self._head == None def length(self): &amp;quot;&amp;quot;&amp;quot;链表长度&amp;quot;&amp;quot;&amp;quot; # cur初始时指向头节点 cur = self._head count = 0 # 尾节点指向None，当未到达尾部时 while cur != None: count += 1 # 将cur后移一个节点 cur = cur.</description>
    </item>
    
    <item>
      <title>python链表操作</title>
      <link>/2019/python%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/python%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>顺序表的构建需要预先知道数据大小来申请连续的存储空间，而在进行扩充时又需要进行数据的搬迁，所以使用起来并不是很灵活。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。
链表的定义： 链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是不像顺序表一样连续存储数据，而是在每一个节点（数据存储单元）里存放下一个节点的位置信息（即地址）。
链表失去了顺序表随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大，但对存储空间的使用要相对灵活。 注意： 链表和顺序表在插入和删除时进行的是完全不同的操作。链表的主要耗时操作是遍历查找，删除和插入操作本身的复杂度是O(1)。顺序表查找很快，主要耗时的操作是拷贝覆盖。因为除了目标元素在尾部的特殊情况，顺序表进行插入和删除时需要对操作点之后的所有元素进行前后移位操作，只能通过拷贝和覆盖的方法进行。
1、创建一个链接 node1 = Node(&amp;ldquo;c&amp;rdquo;,node3) 或者 node1 = Node(&amp;ldquo;c&amp;rdquo;,None) node1.next = node3 2、用循环创建一个链表结构，并且访问其中的每一个节点 class Node(object): def init(self, data, next=None): self.data = data self.next = next
head = None for count in range(1,6): head = Node(count, head) while head != None: print(head.data) head = head.next 3、遍历 遍历使用一个临时的指针变量，这个变量先初始化为链表结构的head指针，然后控制一个循环。
probe = head while probe != None: probe = probe.next 4、搜索 有两个终止条件：
 一、空链表，不再有要检查的数据。
 二、目标项等于数据项，成功找到。
probe = head while probe !</description>
    </item>
    
    <item>
      <title>单链表反转</title>
      <link>/2019/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/</guid>
      <description>单链表结构 head &amp;mdash; node1 &amp;mdash; node2 &amp;mdash; node3 &amp;mdash; node4 &amp;mdash;- None
反转实现 建立三个变量，L、M、R互相赋值迭代，并建立指向关系，从而实现单链表的反转。 python代码实现 class Node(object): def init(self, data, next=None): self.val = data self.next = next
def fun4(head): if head == None: return None L,M,R = None,None,head while R.next != None: L = M M = R R = R.next M.next = L R.next = M return R #测试用例 if name == &amp;lsquo;main&amp;lsquo;: l1 = Node(3) l1.next = Node(2) l1.</description>
    </item>
    
  </channel>
</rss>